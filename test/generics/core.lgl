tag color is vec<3>;

// Note that t cannot be a bool
`t add_op<`t : genType>(`t x, `t y) {
    `t result = x + y;
    return result;
}

`u app_mat<`t : vec, `u : vec>(`t->`u m, `t x) {
    return m * x;
}

`t id_vec3<`t : vec<3>>(`t x) {
    `t->`t id = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]];
    return x;
}

vec2 project_r3_r2<`t : vec<3>>(`t x) {
    `t->vec2 proj = [[1., 0., 0.], [0., 1., 0.]];
    // Multiply, but annoying as a test
    return app_mat<`t, vec2>(proj, x);
}

`t triple<`t : genType>(`t x) {
    return 3. * x;
}

`t scale_mat<`t : mat>(`t m1, `t m2) {
    `t l = 3. * m1;
    `t r = 5. * m2;
    return l + r;
}

void main() {
    print add_op<int>(1, 2);
    print add_op<float>(1., .3);
    print add_op<vec2>([1., 2.], [2., 1.]);
    print add_op<int>(add_op<int>(1, 2), add_op<int>(2, 3));

    print id_vec3<vec3>([2., 1., 1.]);

    print app_mat<vec2, vec3>([[1., 0.], [0., 1.], [1., 1.]], [1., 2.]);
    print project_r3_r2<vec3>([1., 1., 1.]);

    print triple<float>(3.);
    print triple<vec2>([1., 2.]);
    print scale_mat<vec2->vec2>([[1., 0.], [0., 1.]], [[1., 0.], [0., 1.]]);
    print scale_mat<mat2x2>([[1., 0.], [0., 1.]], [[1., 0.], [0., 1.]]);
}