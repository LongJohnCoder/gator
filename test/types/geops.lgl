declare float cos(float f);
declare float sqrt(float f);
declare float acos(float f);

prototype geometry {
    object point<r>;
    object vector<r>;

    vector<r> +(vector<r> x, vector<r> y);
    vector<r> -(vector<r> x, vector<r> y);
    vector<r> *(vector<r> v, scalar<r> s);
    vector<r> *(scalar<r> s, vector<r> v);
    vector<r> -(vector<r> v);
    position<r> translate(position<r> p, vector<r> v);
    point<r> +(point<r> p, vector<r> v);
    point<r> -(point<r> p, vector<r> v);
    vector<r> -(point<r> x, point<r> y);
    vector<r> -(point<r> x);
}
coordinate cart2 : geometry {
    dimension 2; // i.e. all frame parameters implicitly require dimension 2

    object point<r> is float[2];
    object vector<r> is float[2];

    vector<r> +(vector<r> x, vector<r> y) {
        return x + y;
    }
    vector<r> -(vector<r> x, vector<r> y) {
        return x - y;
    }
    vector<r> *(vector<r> v, scalar s) {
        return v * s;
    }
    vector<r> *(scalar s, vector<r> v) {
        return s * v;
    }
    vector<r> -(vector<r> v) {
        return -v;
    }
    point<r> translate(point<r> p, vector<r> v) {
        return p + v;
    }
    point<r> +(point<r> p, vector<r> v) {
        return p + v;
    }
    point<r> -(point<r> p, vector<r> v) {
        return p - v;
    }
    vector<r> -(point<r> x, point<r> y) {
        return x - y;
    }
    vector<r> -(point<r> v) {
        return -v;
    }
}
coordinate cart3 : geometry {
    dimension 3;

    object point<r> is float[3];
    object vector<r> is float[3];

    vector<r> +(vector<r> x, vector<r> y) {
        return x + y;
    }
    vector<r> -(vector<r> x, vector<r> y) {
        return x - y;
    }
    vector<r> *(vector<r> v, scalar<r> s) {
        return v * s;
    }
    vector<r> *(scalar<r> s, vector<r> v) {
        return s * v;
    }
    vector<r> -(vector<r> v) {
        return -v;
    }
    position<r> translate(position<r> p, vector<r> v) {
        return p + v;
    }
    point<r> +(point<r> p, vector<r> v) {
        return p + v;
    }
    point<r> -(point<r> p, vector<r> v) {
        return p - v;
    }
    vector<r> -(point<r> x, point<r> y) {
        return x - y;
    }
    vector<r> -(point<r> v) {
        return -v;
    }
}
coordinate polar : geometry {
    dimension 2;

    object point<r> is float[2];
    object vector<r> is float[2];

    t __trans<t : float[2]>(t x, t y) {
        // https://pritschet.me/wiki/physics/linear-translation-polar-coordinates/
        float r1 = x[0];
        float r2 = y[0];
        float theta1 = x[1];
        float theta2 = x[2];
        float r = sqrt(r1 * r1 + r2 * r2 + 2 * r1 * r2 * cos(theta1 - theta2));
        float theta = acos((r1 * cos(theta1) + r2 * cos(theta2)) / r);
        return [r, theta];
    }
    vector<r> +(vector<r> x, vector<r> y) {
        return __trans(x, y);
    }
    vector<r> -(vector<r> x, vector<r> y) {
        return __trans(x, [-y[0], y[1]]);
    }
    vector<r> *(vector<r> v, scalar s) {
        return [v[0] * s, v[1]];
    }
    vector<r> *(scalar s, vector v) {
        return [s * v[0], v[1]];
    }
    vector<r> -(vector<r> v) {
        return [-v[0], v[1]];
    }
    point<r> translate(point<r> p, vector<r> v) {
        return __trans(p, v);
    }
    point<r> +(point<r> p, vector<r> v) {
        return __trans(p, v);
    }
    point<r> +(point<r> p, vector<r> v) {
        return p - v;
    }
    vector<r> -(point<r> x, point<r> y) {
        return __trans(x, [-y[0], y[1]]);
    }
    vector<r> -(point<r> v) {
        return [-v[0], v[1]];
    }
}
coordinate hom : geometry {
    dimension 3;

    object point is float[4];
    object vector is float[4];

    vector<r> +(vector<r> x, vector<r> y) {
        return [x[0] + y[0], x[1] + y[1], x[2] + y[2], 0.];
    }
    vector<r> -(vector<r> x, vector<r> y) {
        return [x[0] - y[0], x[1] - y[1], x[2] - y[2], 0.];
    }
    vector<r> *(vector<r> v, scalar<r> s) {
        return [x[0] * s, x[1] * s, x[2] * s, 0.];
    }
    vector<r> *(scalar<r> s, vector<r> v) {
        return [s * x[0], s * x[1], s * x[2], 0.];
    }
    vector<r> -(vector<r> v) {
        return [s * x[0], s * x[1], s * x[2], 0.];
    }
    point<r> translate(point<r> p, vector<r> v) {
        return p + v * p[3];
    }
    point<r> +(point<r> p, vector<r> v) {
        return p + v * p[3];
    }
    point<r> -(point<r> p, vector<r> v) {
        return p - v * p[3];
    }
    vector<r> -(point<r> x, point<r> y) {
        return x * y[3] + y * x[3];
    }
    // We don't actually need to define every function, it will just fail if we try and call an undefined function
}

frame world has dimension 3;
frame plane has dimension 2;

void main() {
    cart2.point<plane> ppos = [1., 1.];
    cart2.vector<plane> poffset = [1., 2.];

    print pos + offset;
    print 2. * (pos - (pos + offset));
    
    cart3.vector<world> mpos = [1., 2., 3.];
    
    print mpos - mpos * 2.;

    polar.vector<plane> ppo = [1., 3.14159265];
    polar.vector<plane> ppo2 = [1., 0.];
    
    print 3. * ppo * 2.;
    print ppo + ppo2;

    hom.point<world> hpos = [1., 2., 3., 2.];
    hom.vector<world> hvec = [1., 1., 1., 0.];

    print hpos + hvec * 2;
    print hpos - (hpos + hvec);
}
