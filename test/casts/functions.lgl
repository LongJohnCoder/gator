tag coord a is vec<2>;
tag coord b is vec<2>;
tag coord c is vec<2>;
space coord d is vec<3>;
tag coord e is vec<2>;

canon b _ab(a v) {
    a->b _ab = [[1., 2.], [1., 2.]]; // not a duplicate cause no recursion
    return _ab * v;
}

c ac(a v, b->c m) {
    return v in c; // = m * _ab(v)
}

canon c _ac<`t : a>(`t v) {
    return ac(v, [[1., 1.], [1., 2.]]); // cause v <: a
}

canon d _asd<`t : vec<2>>(`t v) {
    `t->d m = [[1., 0.], [0., 1.], [0., 0.]];
    return m * v + [0., 0., 1.];
}

canon `t _collapse_e<`t : coord e>(d v) {
    d->`t m = [[1., 0., 0.], [0., 1., 0.]];
    return v in `t; // we can use 'in' since `t must be a coord (see abstract.lgl)
}

canon `t _collapse_a<`t : coord a>(d v) {
    d->`t m = [[1., 0., 0.], [0., 1., 0.]];
    return v in `t; // we can use 'in' since `t must be a coord (see abstract.lgl)
} 

void main() {
    a avec = [1., 1.];
    
    b s1 = avec in b;  // = _ab(avec)
    c s2 = avec in c;  // = _ac<a>(avec) -- has to use generic inference to figure out <a>
    d s3 = avec in d; // = _asd<a>(avec)
    e s4 = avec in e;  // = _collapse_e<e>(_asd<a>(avec))
    a s5 = avec in c in d in a; // = _collapse_a<a>(_asd<c>(_ac<a>(avec))) -- not the identity of avec, a.k.a. why _asd is written wrong

    print s1;
    print s2;
    print s3;
    print s4;
    print s5;
}