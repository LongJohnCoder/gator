// Blinn-Phong
// GLSL reference:
// https://learnopengl.com/Lighting/Basic-Lighting
// Note that some varying values are baked in differently here (e.g. vNormal vs. normalWorld)
// Thus we sometimes use Braid example as a reference
// https://capra.cs.cornell.edu/braid/dingus/#example=phong

tag model is vec3;
tag modelHom is vec4;
tag world is vec3;
tag worldHom is vec4;
tag camera is vec3;
tag cameraHom is vec4;
tag color is vec3;
tag alphaColor is vec4;

declare float dot<`t: genType>(`t v1, `t v2);
declare `t normalize<`t : vec>(`t x);

// parsing error : allow empty mains
void main(model vPosition, modelHom->worldHom uModel, worldHom->cameraHom uView, model vNormal, world uLight) {
    model->modelHom extendModel = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];
    modelHom modelScale = [0., 0., 0., 1.];
    modelHom->model collapseModel = [[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.]];
    world->worldHom extendWorld = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];
    worldHom worldScale = [0., 0., 0., 1.];
    worldHom->world collapseWorld = [[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.]];
    camera->cameraHom extendCamera = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];
    cameraHom cameraScale = [0., 0., 0., 1.];
    cameraHom->camera collapseCamera = [[1., 0., 0., 0.],[0., 1., 0., 0.], [0., 0., 1., 0.]];

    color->alphaColor extendColor = [[1., 0., 0.],[0., 1., 0.],[0., 0., 1.],[0., 0., 0.]];
    alphaColor opaque = [0., 0., 0., 1.];
    
    color ambient = [.1, 0., 0.];
    color diffuse = [0.4, 0.3, 0.9];
    color spec = [1.0, 1.0, 1.0];


    world worldPosition = collapseWorld * (uModel * ((extendModel * vPosition) + modelScale));

    // world worldNormal = normalize(collapseWorld * (extendModel * vNormal));
    world worldNormal = normalize(collapseWorld * (uModel * (extendModel * vNormal)));
    world lightDir = normalize(uLight - worldPosition);


    float lambertian = 0.0;
    float lDot = dot(worldNormal, lightDir);
    bool lDotCheck = (0. <= lDot);
    if (lDotCheck) {
        lambertian = lDot;
    } else { 
        skip; 
    }

    // camera viewDir = normalize([0., 0., 0.] - collapseCamera * 
    // (uModel * ((extendWorld * worldPosition) + [0., 0., 0., 1.])));
    camera viewDir = normalize([0., 0., 0.] - collapseCamera * 
    (uView * ((extendWorld * worldPosition) + [0., 0., 0., 1.])));
    world negLight = [0., 0., 0.] - lightDir;
    world reflectDir = negLight - (2. * (dot<world>(worldNormal, negLight)) * worldNormal);
    float specular = 0.0;

    if (0.0 <= lambertian && !(lambertian == 0.0)) {
        float specAngle = 0.;
        camera cameraDir = collapseCamera * (uView * (extendWorld * reflectDir));
        world->camera asCamera = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]];
        float specDot = dot(viewDir, cameraDir);
        //float specDot = dot(viewDir, asCamera * reflectDir);
        bool specDotCheck = (0. <= specDot);
        if (specDotCheck) { 
            specAngle = specDot; 
        } else { 
            skip; 
        }
        specular = specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle;
    }
    else { 
        skip; 
    }

    color fragColor = ambient + lambertian * diffuse + specular * spec;
    alphaColor gl_FragColor = (extendColor * fragColor) + opaque;
}
