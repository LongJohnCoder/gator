type vec3 is float[3];
type vec4 is float[4];
type mat3 is float[3][3];
type mat4 is float[4][4];
type scalar is float;

declare T +<T:vec3>(T v1, T v2);
declare T -<T:vec3>(T v1, T v2);
declare T -<T:vec3>(T v);
declare T *<T:vec3,U:float>(T v, U f);
declare T *<T:vec3,U:float>(U f, T v);
declare T /<T:vec3,U:float>(T f1, U f2);

declare T +<T:vec4>(T v1, T v2);
declare T -<T:vec4>(T v1, T v2);
declare T -<T:vec4>(T v);
declare T *<T:vec4,U:float>(T v, U f);
declare T *<T:vec4,U:float>(U f, T v);

declare T +<T:float>(T f1, T f2);
declare T -<T:float>(T f1, T f2);
declare T -<T:float>(T f);
declare T *<T:float>(T f1, T f2);
declare T /<T:float>(T f1, T f2);

declare vec3 *<T:mat3,U:vec3>(T m, U v);
declare mat3 +<T:mat3,U:mat3>(T m, U v);
declare mat3 *<T:mat3,U:mat3>(T m, U v);

declare vec4 *<T:mat4,U:vec4>(T m, U v);
declare mat4 +<T:mat4,U:mat4>(T m, U v);
declare mat4 *<T:mat4,U:mat4>(T m, U v);

declare float cos(float f);
declare float sqrt(float f);
declare float acos(float f);

declare vec4 vec4<T:float[3],U:float>(T v, U f);
declare vec3 vec3<T:float[4]>(T v);

prototype geometry {
    object point;
    object vector;
    object direction;
    object matrix<r1, r2>;

    vector +(vector x, vector y);
    vector -(vector x, vector y);
    vector -(vector x);
    vector *(vector v, scalar s);
    vector *(scalar s, vector v);
    point translate(point p, vector v);
    point +(point p, vector v);
    point +(vector p, point v);
    vector -(point x, point y);
    vector -(point x);
    with frame target:
    this<target>.vector *(matrix<target> m, vector v);

    with frame target:
    this<target>.vector *(matrix<target> m, direction v);

    with frame target:
    this<target>.point *(matrix<target> m, point v);

    with frame target:
    matrix<target> +(matrix<target> m1, matrix<target> m2);

    with frame middle, target:
    matrix<target> *(matrix<middle> m1, this<middle>.matrix<target> m2);
}

with frame(3) r:
coordinate cart3 : geometry {
    object point is float[3];
    object vector is float[3];
    object direction is float[3];
    object matrix<r2> is float[3][3];

    vector +(vector x, vector y) {
        return (x as! vec3 + y as! vec3) as! vector;
    }
    vector -(vector x, vector y) {
        return (x as! vec3 - y as! vec3) as! vector;
    }
    vector *(vector v, scalar s) {
        return (v as! vec3 * s) as! vector;
    }
    vector *(scalar s, vector v) {
        return (s * v as! vec3) as! vector;
    }
    vector -(vector v) {
        return (-v as! vec3) as! vector;
    }
    point translate(point p, vector v) {
        return (p as! vec3 + v as! vec3) as! point;
    }
    point +(point p, vector v) {
        return (p as! vec3 + v as! vec3) as! point;
    }
    point +(vector v, point p) {
        return (p as! vec3 + v as! vec3) as! point;
    }
    vector -(point x, point y) {
        return (x as! vec3 - y as! vec3) as! vector;
    }
    vector -(point v) {
        return (-v as! vec3) as! vector;
    }
    with frame(3) target:
    this<target>.vector *(matrix<target> m, vector v) {
        return (m as! mat3 * v as! vec3) as! this<r2>.vector;
    }
    with frame(3) target:
    this<target>.vector *(matrix<target> m, direction d) {
        return (m as! mat3 * d as! vec3) as! this<r2>.vector;
    }
    with frame(3) target:
    this<target>.point *(matrix<target> m, point p) {
        return (m as! mat3 * p as! vec3) as! this<r2>.point;
    }
    with frame(3) target:
    matrix<target> +(matrix<target> m1, matrix<target> m2) {
        return (m1 as! mat3 + m2 as! mat3) as! matrix<r3>;
    }
    with frame(3) middle, target:
    matrix<target> *(matrix<middle> m1, this<middle>.matrix<target> m2) {
        return (m1 as! mat3 * m2 as! mat3) as! matrix<target>;
    }
}

with frame(3) r:
coordinate hom : geometry {
    object point is float[4];
    object vector is float[4];
    object direction is float[4];
    object matrix<r1, r2> is float[4][4];

    point +(point p, vector v) {
        return (p as! vec4 + v as! vec4 * p[3]) as! point;
    }
    point +(vector v, point p) {
        return (p as! vec4 + v as! vec4 * p[3]) as! point;
    }
    vector -(point x, point y) {
        return (x as! vec4 * y[3] - y as! vec4 * x[3]) as! vector;
    }
    with frame(3) target:
    this<target>.vector *(matrix<target> m, vector v) {
        return (m as! mat4 * v as! vec4) as! this<r2>.vector;
    }
    with frame(3) target:
    this<target>.vector *(matrix<target> m, direction d) {
        return (m as! mat4 * d as! vec4) as! this<r2>.vector;
    }
    with frame(3) target:
    this<target>.point *(matrix<target> m, point p) {
        return (m as! mat4 * p as! vec4) as! this<r2>.point;
    }
    with frame(3) target:
    matrix<target> +(matrix<target> m1, matrix<target> m2) {
        return (m1 as! mat4 + m2 as! mat4) as! matrix<r3>;
    }
    with frame(3) middle, target:
    matrix<target> *(matrix<middle> m1, this<middle>.matrix<target> m2) {
        return (m1 as! mat4 * m2 as! mat4) as! matrix<target>;
    }
}

frame model has dimension 3;
frame world has dimension 3;

with frame(3) r:
hom<r>.point homify(cart3.point v) {
    return vec4(v, 1.) as! hom<r>.point;
}
with frame(3) r:
hom<r>.vector homify(cart3.vector v) {
    return vec4(v, 1.) as! hom<r>.vector;
}
with frame(3) r:
cart3<r>.point reduce_hom(hom.point v) {
    return (vec3(v) / v[3]) as! cart3<r>.point;
}
with frame(3) r:
cart3<r>.vector reduce_hom(hom.vector v) {
    return vec3(v) as! cart3<r>.vector;
}

void main() {
    cart3<model>.point pos = [1., 2., 3.];
    cart3<world>.point light = [-1., -1., 0.];
    cart3<world>.vector offset = [2., 2., 2.];

    // Pure translation matrix
    hom<model>.matrix<world> mtrans = 
        [[1., 0., 0., 1.], 
         [0., 1., 0., -1.],
         [0., 0., 1., 1.],
         [0., 0., 0., 1.]];

    hom<world>.matrix<model> minv = 
        [[1., 0., 0., -1.], 
         [0., 1., 0., 1.],
         [0., 0., 1., -1.],
         [0., 0., 0., 1.]];

    hom<model>.matrix<model> mid = mtrans * minv;

    hom<model>.point hpos = homify<model>(pos);
    hom<world>.vector hoff = homify<world>(offset);

    print hpos;
    print hoff;

    print (mtrans * hpos) + hoff;
    print mtrans * (hpos + (minv * hoff));  // Should be the same!
    print reduce_hom<world>(homify<world>(light) + homify<world>(offset));
}