// Blinn-Phong
// GLSL reference:
// https://learnopengl.com/Lighting/Basic-Lighting
// Note that some varying values are baked in differently here (e.g. vNormal vs. normalWorld)
// Thus we sometimes use Braid example as a reference
// https://capra.cs.cornell.edu/braid/dingus/#example=phong

space model is vec<3>;
space modelHom is vec<4>;
space world is vec<3>;
space worldHom is vec<4>;
space camera is vec<3>;
space cameraHom is vec<4>;
space color is vec<3>;
space alphaColor is vec<4>;

declare float dot<`t: genType>(`t v1, `t v2);
declare `t normalize<`t : genType>(`t x);

varying model vPosition;
uniform modelHom->worldHom uModel;
uniform worldHom->cameraHom uView;
varying model vNormal;
uniform world uLight;

// parsing error : allow empty mains
void main() {

    model->modelHom extendModel = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];

    modelHom modelScale = [0., 0., 0., 1.];
    modelHom->model collapseModel = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    world->worldHom extendWorld = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    worldHom worldScale = [0., 0., 0., 1.];
    worldHom->world collapseWorld = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    camera->cameraHom extendCamera = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    cameraHom cameraScale = [0., 0., 0., 1.];
    cameraHom->camera collapseCamera = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    color->alphaColor extendColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    alphaColor opaque = [0., 0., 0., 1.];

    worldHom getWorldW = [0., 0., 0., 1.];

    model->color modelAsColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];

    world->color worldAsColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];

    // PARSING ERROR: allow vec3AsWorld
    vec3->world vecAsWorld = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];
    
    // ****************
    // Ambient lighting 
    // ****************
    color ambient = [.3, 0., 0.];
    color diffuse = [.3, 0.0, 0.0];
    color spec = [1.0, 1.0, 1.0];

    // ****************
    // Diffuse lighting
    // ****************
    // Calculate the real position of this pixel in 3d space
    world worldPosition = collapseWorld * (uModel * ((extendModel * vPosition) + modelScale));
    world worldNormal = normalize(collapseWorld * (uModel * (extendModel * vNormal)));
    world lightDir = normalize(uLight - worldPosition);

    float lambertian = 0.0;
    float lDot = dot(worldNormal, lightDir);
    bool lDotCheck = (0. <= lDot);
    if (lDotCheck) {
        lambertian = lDot;
    } else { 
        skip; 
    }

    camera viewDir = normalize([0., 0., 0.] - collapseCamera * (uView * ((extendWorld * worldPosition) + [0., 0., 0., 1.])));
    world negLight = [0., 0., 0.] - lightDir;

    // ****************
    // Specular lighting
    // ****************
    // See glsl reflection definition
    world reflectDir = negLight - (2. * (dot(worldNormal, negLight)) * worldNormal);
    float specular = 0.0;

    if (0.0 <= lambertian && !(lambertian == 0.0)) {
        float specAngle = 0.;
        camera cameraDir = collapseCamera * (uView * (extendWorld * reflectDir));
        world->camera asCamera = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]];
        float specDot = dot(viewDir, cameraDir);
        //float specDot = dot<camera>(viewDir, asCamera * reflectDir);
        bool specDotCheck = (0. <= specDot);
        if (specDotCheck) { 
            specAngle = specDot; 
        } else { 
            skip; 
        }
        specular = specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle;
    }
    else { 
        skip; 
    }

    color fragColor = ambient + lambertian * diffuse + specular * spec;
    alphaColor gl_FragColor = (extendColor * fragColor) + opaque;
}
