using "../glsl_defs.lgl";

// Reference Frame Declarations

frame model has dimension 3;
frame world has dimension 3;
frame camera has dimension 3;
frame light has dimension 3;

// Global Variables

varying cart3.point<model> vPosition;
uniform hom.transformation<model, world> uModel;
uniform hom.transformation<world, camera> uView;
varying cart3.vector<model> vNormal;
uniform cart3.point<light> uLight;
uniform hom.transformation<light, world> uLightTrans;

// Can't canonicalize matrices for now, so we do this
canon hom.point<world> app_uModel(hom.point<model> v) {
    return uModel * v;
}
canon hom.vector<world> app_uModel(hom.vector<model> v) {
    return uModel * v;
}
canon hom.point<camera> app_uView(hom.point<world> v) {
    return uView * v;
}
canon hom.vector<camera> app_uView(hom.vector<world> v) {
    return uView * v;
}
canon hom.point<world> app_uLightTrans(hom.point<light> v) {
    return uLightTrans * v;
}
canon hom.vector<world> app_uLightTrans(hom.vector<light> v) {
    return uLightTrans * v;
}

// Shader Code

void main() {
    color ambient = [.1, 0., 0.];
    color diffColor = [0.2, 0.8, 0.4];
    color specColor = [1.0, 1.0, 1.0];

    // auto temp = vPosition in hom.point<model>;
    auto worldPos = vPosition in cart3.point<world>;
    auto camPos = worldPos in cart3.point<camera>;
    auto worldNorm = normalize(vNormal in cart3.vector<world>);

    auto lightDir = normalize((uLight in cart3.point<world>) - worldPos);
    auto lightWorldDot = dot(lightDir, worldNorm);
    scalar diffuse = max(lightWorldDot, 0.0);

    auto reflectDir = normalize(reflect(-lightDir, worldNorm) in cart3.vector<camera>);

    scalar specular = pow(max(dot(normalize(-camPos), reflectDir), 0.), 32.);

    vec4 gl_FragColor = vec4(ambient + diffuse * diffColor + specular * specColor, 1.0);
}