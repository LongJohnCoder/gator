declare float dot<`t: genType>(`t v1, `t v2);
declare `t normalize<`t : genType>(`t x);
declare vec4 vec4(vec3 v, float f);
declare vec3 vec3(vec4 v);
declare float max(float f1, float f2);
declare `t reflect<`t : vec>(`t v1, `t v2);
declare float pow(float f1, float f2);

varying vec3 vPosition;
uniform vec4->vec4 uModel;
uniform vec4->vec4 uView;
varying vec3 vNormal;
uniform vec3 uLight;

void main() {
    vec3 ambient = [.1, 0., 0.];
    vec3 diffColor = [0.4, 0.3, 0.9];
    vec3 specColor = [1.0, 1.0, 1.0];

    vec3 worldPos = vec3(uModel*vec4(vPosition, 1.0));
    vec3 camPos = vec3(uView*vec4(worldPos, 1.));
    vec3 worldNorm = normalize(vec3(uModel*vec4(vNormal, 0.0)));

    vec3 lightDir = normalize(uLight - worldPos);
    float lightWorldDot = dot(lightDir, worldNorm);
    float diffuse = max(lightWorldDot, 0.0);

    vec3 reflectDir = vec3(uView * vec4(reflect(-lightDir, worldNorm), 0.));

    float specular = pow(max(-dot(normalize(camPos), reflectDir), 0.), 32.);

    vec4 gl_FragColor = vec4(ambient + diffuse * diffColor + specular * specColor, 1.0);
}

