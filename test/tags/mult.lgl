tag a is vec<2>;
tag b is vec<3>;
tag c is b;
tag d is b;

void main() {
    a x = [1., 2.];
    b y = [2., 1., 2.];
    c z = [3., 3., 3.];
    d z2 = [0., 0., 1.];

    a->b a_b = [[1., 1.], [1., 1.], [1., 1.]];
    a->a a_a = [[1., 0.], [0., 1.]];
    b->a b_a = [[1., 1., 1.], [1., 1., 1.]];
    c->b c_b = [[1., 0., 0.], [1., 1., 1.], [0., 0., 1.]];
    b->c b_c = [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]];
    d->b d_b = [[1., -1., 1.], [-1., 1., 1.], [1., 1., -1.]];
    b->d b_d = [[1., -1., 1.], [-1., 1., 1.], [1., 1., -1.]];

    // Maps
    a s11 = a_a * x;
    b s12 = a_b * x;
    a s13 = a_a * b_a * y; 
    c s14 = (b_c + b_c) * y;
    b s15 = (b_c + b_d) * y;
    a s16 = b_a * (a_b * x);

    print s11;
    print s12;
    print s13;
    print s14;
    print s15;
    print s16;

    // Composition
    a->a s21 = b_a * a_b;
    a->c s22 = b_c * a_b;
    b->c s23 =  b_c * a_b * b_a;
    a s24 = (b_a * a_b) * x;
    b->b s25 = b_c + c_b * b_c; // Note that order of operations actually matters here (!)
    b s26 = (d_b + c_b) * [1., 2., 3.]; // Vector must be bottom type
    a->b s27 = b_c * a_b; // This subsumption is legal cause matrix upcasting

    print s21;
    print s22;
    print s23;
    print s24;
    print s25;
    print s26;
    print s27;

}

