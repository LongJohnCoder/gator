tag model is vec3;
tag world is vec3;
tag worldHom is vec4;
tag color is vec3;
tag alphaColor is vec4;

declare vec4 vec4(vec3 v, float f);
declare float dot(vec3 v1, vec3 v2);
declare float cos(float f);
declare float sin(float f);
declare float max(float f1, float f2);
declare float min(float f1, float f2);
declare float exp(float f);
declare `t abs<`t: genType>(`t f);
declare float mix(float f1, float f2, float f3);
declare float log(float f);
declare float fract(float f);
declare float pow(float f, float p);
declare float clamp(float x, float min, float max);

vec3 loop(vec3 p, float strength, float accum, float prev, float tw, float i) {
    float mag = dot(p, p);
    p = abs<vec3>(p) / mag + [-.51, -.4, -1.3];
    float w = exp(-i / 7.);
    accum = accum + w * exp(-strength * pow(abs<float>(mag - prev), 2.3));
    tw = tw + w;
    return [accum, tw, mag];
}

vec3 loop32(vec3 p, float strength, float accum, float prev, float tw) {
    vec3 vals = [accum, tw, prev];
    // Cause we don't have for loops yet!
    vals = loop(p, strength, vals[0], vals[2], vals[1], 0.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 1.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 2.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 3.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 4.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 5.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 6.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 7.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 8.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 9.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 10.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 11.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 12.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 13.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 14.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 15.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 16.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 17.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 18.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 19.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 20.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 21.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 22.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 23.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 24.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 25.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 26.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 27.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 28.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 29.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 30.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    vals = loop(p, strength, vals[0], vals[2], vals[1], 31.);
    p = abs<vec3>(p) / vals[2] + [-.51, -.4, -1.3];
    return vals;
}

// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/
float field(vec3 p, float time) {
	float strength = 7. + .03 * log(.000001 + fract(sin(time) * 4373.11));
	float accum = 0.;
	float prev = 0.;
	float tw = 0.;
    vec3 result = loop32(p, strength, accum, prev, tw);
    accum = result[0];
    tw = result[1];
	return max(0., 5. * accum / tw - .2);
}

color asColor(vec3 v) {
    return [v.x, v.y, v.z];
}

alphaColor alpha(color c, float f) {
    vec4->alphaColor ida = [[1., 0., 0., 0.],[0., 1., 0., 0.],[0., 0., 1., 0.],[0., 0., 0., 1.]];
    return ida * vec4(c.rgb, f);
}

void main(model vPosition, model vNormal, color uBaseColor, float uBrightness, float uScale, float uTime) {
    color baseColor = uBaseColor;
    float brightness = uBrightness;
    float scale = uScale;
    float time = uTime / 1000.;
    float stupid = uBaseColor[0] + uBrightness + uScale + uTime;
    model->vec3 idm = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]];

    model pos = vPosition / scale;
    vec3 utPos = idm * pos;
    vec3 p = utPos / 4. + [2., -1.3, -1.];
    p = p + 0.18 * [sin(time / 16.), sin(time / 12.),  sin(time / 128.)];

    vec3 p2 = utPos / (4.+sin(time*0.11)*0.2+0.2+sin(time*0.15)*0.3+0.4) + [2., -1.3, -1.];
	p2 = p2 + 0.2 * [sin(time / 16.), sin(time / 12.),  sin(time / 128.)];

    vec3 p3 = utPos / (4.+sin(time*0.14)*0.23+0.23+sin(time*0.19)*0.31+0.31) + [2., -1.3, -1.];
	p3 = p3 + 0.25 * [sin(time / 16.), sin(time / 12.),  sin(time / 128.)];

    float t = field(p, time);
    float t2 = field(p2, time);
	float t3 = field(p3, time);

    float v = (1. - exp((abs<float>(pos.x) - 1.) * 6.))
     * (1. - exp((abs<float>(pos.y) - 1.) * 6.)) * (1. - exp((abs<float>(pos.z) - 1.) * 6.));

    vec3 c1 = mix(.9, 1., v) * [1.8 * t * t * t, 1.4 * t * t, t];
    vec3 c2 = mix(.8, 1., v) * [1.9 * t2 * t2 * t2, 1.8 * t2 * t2, t2];
    vec3 c3 = mix(.8, 1., v) * [1.4 * t3 * t3 * t3, 1.8 * t3 * t3, t3];
    c1 = c1 .* baseColor;
    c2 = c2 .* baseColor;
    c3 = c3 .* baseColor;

    alphaColor gl_FragColor = alpha(brightness * asColor(c1*0.7 + c2*0.9 + c3*0.1), stupid);
}