// Phong lighting with top types
// Referenced https://learnopengl.com/Lighting/Basic-Lighting


declare float dot(vec3 v1, vec3 v2);
declare vec3 normalize(vec3 v1); 

uniform vec3 uPosition;
uniform vec4->vec4 uModel;
uniform vec4->vec4 uView;
varying vec3 vNormal;
uniform vec3 uLight;
varying vec3 vPosition;

void main() {
    vec4->vec3 v4_v3 = [
        [1.,0.,0.,0.],
        [0.,1.,0.,0.],
        [0.,0.,1.,0.]
    ];

    vec3->vec4 v3_v4 = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
        
    vec3 color = [0.9, 0.8, 0.9]; // tasty orange
    vec3 lightColor = [0.4, 0.3, 0.9];

    float ambientStrength = 0.5;
    vec3 ambient = ambientStrength * lightColor;

    vec3 worldPos = v4_v3 * (uModel * ((v3_v4 * vPosition) + [0., 0., 0., 1.]));

    // Calculate the normal including the model rotation and scale
    // vec3 worldNorm = normalize(v4_v3 * (v3_v4 * vNormal));
    vec3 worldNorm = normalize(v4_v3 * (uModel * (v3_v4 * vNormal)));

    vec3 lightDir = normalize(uLight - worldPos);

    // An example simple lighting effect, taking the dot product of the normal
    float diff = (dot (worldNorm, lightDir));
    bool diff_is_neg = (diff <= 0.);
    if (diff_is_neg) {
        diff = 0.;
    } else { skip; }

    vec3 diffuse = diff * lightColor;

    float specularStrength = 3.;

    // vec3 viewDir = normalize([0., 0., 0.] - v4_v3 * (uModel * ((v3_v4 * worldPos) + [0., 0., 0., 1.])));
    vec3 viewDir = normalize([0., 0., 0.] - v4_v3 * (uView * ((v3_v4 * worldPos) + [0., 0., 0., 0.])));

    vec3->vec3 neg = [
        [-1., 0., 0.],
        [0., -1., 0.],
        [0., 0., -1.]
    ];

    vec3 reflectDir = (neg * lightDir) - 2. * (dot ((neg * lightDir), worldNorm)) * worldNorm;
    vec3 cameraReflect = v4_v3 * (uView * (v3_v4 * reflectDir));
    float spec = dot(viewDir, cameraReflect); 
    bool spec_is_neg = (spec <= 0.);
    if (spec_is_neg) {
        spec = 0.;
    } else { skip; }

    spec = spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec; // We don't have a pow function yet..
    vec3 specular = specularStrength * spec * [1., 1., 1.];  

    // Combining ambient, diffuse, and spectral lighting
    vec3 result = (color .* (ambient + diffuse + specular)); 
    vec4 gl_FragColor = (v3_v4 * result) + [0., 0., 0., 1.];

    //vec4 gl_FragColor = [0., 0., 0., 1.];
    print gl_FragColor;
}
