using "../opengl";

// The goal of this program is to draw two objects
// Each uses the same shader pair and meshes, but different model matrices and colors

// Some kinda metaprogramming 
with type T:
declare type varying;

binding mat4 uModel;
binding mat4 uView;
binding mat4 uProjection;

// All functions must have a target language; this one is typescript
typescript void main() {
    // compiling a program recovers its member variables statically
    // the set of writeable member variables of a program are as follows (U = union):
    // { in(VERTEX) } U { uniform(VERTEX) } U { uniform(FRAGMENT) }
    // the set of readable member variables of a program are the out variable of FRAGMENT
    // We can't yet write or read these these variables
    program = glsl_compile(vertex, fragment);
    ...
    model1 = mat4.create();
    mat4.translate(model1, model1, [10., 10., 10.]);
    model2 = mat4.create();
    mat4.translate(model2, model2, [-10., -10., -10.]);
    while (true) {
        render(program, get_mesh(), get_view(), get_projection());
    }
}

typescript void render(program, mesh, view, projection) {
    state.uProjection = projection;

    // Binds the current program (restricted to a value)
    model1;
    model2;
    color1;
    color2;
    bind program to state.current {
        bind view to uView and projection to uProjection {
            with_mesh = program(aPosition = mesh.positions);
            with_mesh2 = program(aPosition = mesh2.positions);
            bind model1 to uModel {
                with_mesh(color = color1);
            } 
            bind model2 to uModel {
                result = with_mesh(color = color1);
                result.gl_Position;
            }
        }
    }
}

glsl_vertex program void vertex (vec3 aPosition, vec3 color) {

    out vec3 vColor; // associated fragment must have 'in' associated with each out;
    out vec4 gl_Position;

    void main() {
      vColor = color;
      gl_Position = uProjection * uView * uModel * vec4(aPosition, 1.);
    }
}

glsl program void fragment(vec3 vColor) {
    out vec4 gl_FragColor;

    void main() {
        gl_FragColor = vColor;
    }

}