tag model is vec3;
tag modelHom is vec4;
tag world is vec3;
tag worldHom is vec4;
tag camera is vec3;
tag cameraHom is vec4;
tag color is vec3;
tag alphaColor is vec4;

declare world normalize(world v);
declare model normalize(model v);
declare float dot(world v1, world v2);
declare float log(float f);

alphaColor alpha(color c, float f) {
    color->alphaColor cta = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];
    return cta * c + [0., 0., 0., f];
}

void main(model vPosition, model vNormal, world uLight, modelHom->worldHom uModel, worldHom->cameraHom uView) {   
    model->modelHom extendModel = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];

    worldHom->world collapseWorld = [[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.]];

    model norm = normalize(vNormal);
    float intensity = dot(normalize(uLight), collapseWorld * uModel * extendModel * norm);
    color baseColor = [1.0, .5, .5];
    if (intensity <= .2) {
        baseColor = baseColor * .2;
    } else { if (intensity <= .4) {
        baseColor = baseColor * .4;
    } else { if (intensity <= .7) {
        baseColor = baseColor * .6;
    } else {skip;}}}
    alphaColor gl_FragColor = alpha(baseColor, 1.);
}